<Project>
  <PropertyGroup>
    <!-- HACK: use for mac builds until we get codeflow that includes https://github.com/dotnet/runtime/pull/99173 -->
    <UseInTreeAOT Condition="'$(TargetsOSX)' == 'true'">true</UseInTreeAOT>
    <PublishAot Condition="'$(UseInTreeAOT)' != 'true'">true</PublishAot>
    <SelfContained>true</SelfContained>
    <!-- the cmake build will strip and save the symbols -->
    <StripSymbols>false</StripSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UseInTreeAOT)' == 'true'">
      <AlekseyBaseDir>$(ArtifactsBinDir)</AlekseyBaseDir>
      <RuntimeBinDir>$(AlekseyBaseDir)coreclr/$(TargetOS).$(TargetArchitecture).$(RuntimeConfiguration)/</RuntimeBinDir>
      <LibrariesAllBinArtifactsPath>$(AlekseyBaseDir)runtime/net9.0-$(TargetOS)-$(LibrariesConfiguration)-$(TargetArchitecture)/</LibrariesAllBinArtifactsPath>

      <TargetName>$(MSBuildProjectName)</TargetName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(UseInTreeAOT)' == 'true'">
    <IlcPath>$(RuntimeBinDir)/ilc-published/</IlcPath>
    <IlcSdkPath>$(RuntimeBinDir)/aotsdk/</IlcSdkPath>
    <IlcToolsPath>$(IlcPath)</IlcToolsPath>
    <IlcBuildTasksPath>$(IlcToolsPath)/netstandard/ILCompiler.Build.Tasks.dll</IlcBuildTasksPath>
    <IlcFrameworkPath>$(LibrariesAllBinArtifactsPath)</IlcFrameworkPath>
    <IlcFrameworkNativePath>$(LibrariesAllBinArtifactsPath)</IlcFrameworkNativePath>
    <IlcCompileDependsOn>Compile;ComputeIlcCompileInputs;SetupOSSpecificProps;PrepareForILLink</IlcCompileDependsOn>
  </PropertyGroup>

  <Target Name="_ConfigureIlcFrameworkPaths" BeforeTargets="SetupProperties" Condition="'$(UseInTreeAOT)' == 'true'">
    <PropertyGroup>
      <IlcFrameworkPath>$(LibrariesAllBinArtifactsPath)</IlcFrameworkPath>
      <IlcFrameworkNativePath>$(LibrariesAllBinArtifactsPath)</IlcFrameworkNativePath>
    </PropertyGroup>
  </Target>

  <Import Project="$(RuntimeBinDir)/build/Microsoft.DotNet.ILCompiler.SingleEntry.targets" Condition="'$(UseInTreeAOT)' == 'true'"/>

  <!-- set the shared library name.  this helps the native linker correctly reference this shared
       library in dependents -->
  <PropertyGroup>
    <!-- in net9.0 we can do this, but only on mobile apple platforms, not OSX -->
    <SharedLibraryInstallName>@rpath/$(MSBuildProjectName).dylib</SharedLibraryInstallName>
  </PropertyGroup>
  <ItemGroup Condition="'$(TargetsOSX)' == 'true'">
      <LinkerArg Include="-Wl,-install_name,@rpath/$(MSBuildProjectName).dylib" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetsUnix)' == 'true' and ! ('$(TargetsAppleMobile)' == 'true' or '$(TargetsOSX)' == 'true')">
      <!-- If there is no soname, ld on Linux and some other Unixes will embed the full (build-time!)
           path to this shared library into any binary that links against it. We don't want that. -->
      <LinkerArg Include="-Wl,-soname=$(MSBuildProjectName).so" />
  </ItemGroup>

  <PropertyGroup>
      <!-- if IsRuntimeComponent is true, we will put the native library into the specified locations under `artifacts/bin/$(RuntimeFlavor)/os.arch.config/` -->
      <IsRuntimeComponent Condition="'$(IsRuntimeComponent)' == ''">true</IsRuntimeComponent>
  </PropertyGroup>

  <ItemGroup>
    <!-- passed by compile-native.proj to set - -gcc-toolchain=$(ROOTFS_DIR)/usr -->
    <CustomLinkerArg Condition="'$(CustomLinkerArgToolchainArg)' != ''" Include="$(CustomLinkerArgToolchainArg)" />
  </ItemGroup>
</Project>
